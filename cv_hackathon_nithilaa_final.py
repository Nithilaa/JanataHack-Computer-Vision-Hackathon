# -*- coding: utf-8 -*-
"""CV_hackathon_nithilaa_final.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1YKenJ0sWlgXkrsi_K56CYKeP9cLEmx6m
"""

import pandas as pd
import numpy as np
from fastai.vision import *
from fastai.metrics import error_rate

from google.colab import drive
drive.mount('/content/drive')

ROOT_DIR = '/content/drive/MyDrive/janatahack cv'
IMAGE_DIR = '/content/drive/MyDrive/janatahack cv/train/images/'
MODEL_PATH = ROOT_DIR + '/01_model/'

Df_Train = pd.read_csv('/content/drive/MyDrive/janatahack cv/train/train.csv')

Df_Train.head()

train_src = (ImageList.from_df(df = Df_Train, cols = ['image_names'], path = IMAGE_DIR) \
       .split_by_rand_pct(0.2) \
       .label_from_df(cols = 'emergency_or_not'))
train_src

data = (train_src.transform(get_transforms(), size = 224) \
              .databunch(bs = 32) \
              .normalize(imagenet_stats))
data

data.show_batch(rows=3, figsize=(9,9))

data.classes,data.c, len(data.train_ds), len(data.valid_ds)

learn = cnn_learner(data, models.resnet50, metrics=error_rate)

learn.fit_one_cycle(5)

learn.save('stage-1')

learn.recorder.plot_losses()

interp = ClassificationInterpretation.from_learner(learn)

losses,idxs = interp.top_losses()

interp.plot_confusion_matrix(figsize=(6,6), dpi=60)

interp.plot_top_losses(9, figsize=(9,9))

Df_Test = pd.read_csv('/content/drive/MyDrive/janatahack cv/test_janatahack_cv.csv')
Df_Test.head()

test_image = Df_Test.sample().iloc[0]['image_names']
test_image_path = IMAGE_DIR + test_image

test_image_path

img=open_image(test_image_path)
img

pred_class,pred_idx,outputs = learn.predict(img)
pred_idx

Df_Sub = pd.read_csv('/content/drive/MyDrive/janatahack cv/sample_submission_janatahack_cv.csv')
Df_Sub.head()

pred_array=[]
for i in range(len(Df_Sub)):
  image = Df_Sub['image_names'][i]
  image_path = IMAGE_DIR + image
  img=open_image(image_path)
  pred_class,pred_idx,outputs = learn.predict(img)
  pred = pred_idx.item()
  pred_array.append(pred)

Df_Sub['emergency_or_not'] = pred_array

Df_Sub.to_csv('submission.csv', index=False)

